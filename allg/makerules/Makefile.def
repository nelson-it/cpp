                 CPP := g++
                 CC  := gcc
              
             OPT_STD := -g -Wall -pedantic
	          LD_STD := -g
	      
	      OPT_SHARED :=
           LD_SHARED :=
           
           

ifeq "$(NODEBUG)" "TRUE" 
              OPT_STD := -O
     WITH_SHARED_LIBS := TRUE
endif

ifeq "$(EXTERN_ROOT)" ""
    EXTERN_ROOT := ../../extern/i686-pc-mingw32
endif

ifeq "$(UNAME)" "Linux"
          MKLIBNAME = lib$(1).so.$($(1).LIBMAJOR).$($(1).LIBMINOR)

            OPT_STD := $(OPT_STD) -D LINUX
	     OPT_SHARED := -fPIC
                CPP := g++
                 CC := gcc
          LD_SHARED := -shared -Wl,-soname,lib$(TARGET).so.$($(TARGET).LIBMAJOR)        
             LD_PRE := ln -sf $(call MKLIBNAME,$(TARGET)) lib$(TARGET).so; ln -sf $(call MKLIBNAME,$(TARGET)) lib$(TARGET).so.$($(TARGET).LIBMAJOR) 
endif

ifeq "$(UNAME)" "Darwin"
          MKLIBNAME = lib$(1).so.$($(1).LIBMAJOR).$($(1).LIBMINOR)

            OPT_STD := $(OPT_STD) -D MACOS -D Darwin -m32
	 OPT_SHARED := -fPIC
                CPP := g++
                 CC := gcc
             LD_STD := $(LD_STD)
          LD_SHARED := -shared -Wl,-soname,lib$(TARGET).so.$($(TARGET).LIBMAJOR)        
             LD_PRE := ln -sf $(call MKLIBNAME,$(TARGET)) lib$(TARGET).so; ln -sf $(call MKLIBNAME,$(TARGET)) lib$(TARGET).so.$($(TARGET).LIBMAJOR) 
endif

ifeq "$(UNAME)" "CYGWIN_NT-6.1-WOW64"
           MKLIBNAME  = $(1).dll
             OPT_STD := $(OPT_STD) -DMINGW_HAS_SECURE_API
              LD_STD := $(LD_STD)  -lwsock32 -lmsvcr100
                 CPP := i686-w64-mingw32-g++
                  CC := i686-w64-mingw32-gcc
        SHARED_FLAGS := --enable-auto-import
endif

ifeq "$(UNAME)" "CYGWIN_NT-6.2-WOW64"
           MKLIBNAME  = $(1).dll
             OPT_STD := $(OPT_STD) -DMINGW_HAS_SECURE_API
              LD_STD := $(LD_STD)  -lwsock32 -lmsvcr100
                 CPP := i686-w64-mingw32-g++
                  CC := i686-w64-mingw32-gcc
        SHARED_FLAGS := --enable-auto-import
endif

ifdef $($(TARGET).WITH_SHARED_LIBS) 
    WITH_SHARED_LIBS := $($(TARGET).WITH_SHARED_LIBS)
endif

ifeq "$(WITH_SHARED_LIBS)" ""
    WITH_SHARED_LIBS := TRUE
endif

ifdef $(TARGET).WITH_PTHREADS
    WITH_PTHREADS := $($(TARGET).WITH_PTHREADS)
endif

ifeq "$(WITH_PTHREADS)" ""
    WITH_PTHREADS := TRUE
endif

ifdef $(TARGET).WITH_ICONV
    WITH_ICONV := $($(TARGET).WITH_ICONV)
endif

ifeq "$(WITH_ICONV)" ""
    WITH_ICONV := TRUE
endif

ifeq "$(INC_STD)" "" 
          INC_STD := -I$(PROJECT_ROOT)/allg 
endif

ifdef $(TARGET).INC_ADD 
    INC_ADD := $($(TARGET).INC_ADD)
endif

ifeq "$(WITH_PTHREADS)" "TRUE" 
              LIB_PTH := -lpthread 
              INC_PTH := -DPTHREAD
else
              LIB_PTH := 
              INC_PTH := 
endif

ifeq "$($(TARGET).WITH_POSTGRES)" "TRUE" 
    ifeq "$(UNAME)" "Darwin"
              LIB_PG := -L/Library/PostgreSQL/8.4/lib -lpq.5.2
              INC_PG := -I/Library/PostgreSQL/8.4/include 
    else ifeq "$(UNAME)" "CYGWIN_NT-6.1-WOW64"
       POSTGRES_ROOT := /cygdrive/c/PROGRA~2/PostgreSQL/8.4/
              LIB_PG := $(POSTGRES_ROOT)/lib/libpq.lib
              INC_PG := -I$(POSTGRES_ROOT)/include
    else ifeq "$(UNAME)" "CYGWIN_NT-6.2-WOW64"
       POSTGRES_ROOT := /cygdrive/c/PROGRA~2/PostgreSQL/8.4/
              LIB_PG := $(POSTGRES_ROOT)/lib/libpq.lib
              INC_PG := -I$(POSTGRES_ROOT)/include
    else
             LIB_PG := -lpq
             INC_PG := -I/usr/include/postgresql -I$(PROJECT_ROOT)/extern/include/postgres
  endif
endif

ifeq "$($(TARGET).WITH_GD)" "TRUE" 
              LIB_GD := -lgd -lpng -lz -ljpeg -lm
endif

ifeq "$(WITH_ICONV)" "TRUE"
	ifeq "$(UNAME)" "Darwin"
             LD_STD := $(LD_STD) -L /usr/lib -liconv
	endif

	ifeq "$(UNAME)" "CYGWIN_NT-6.1-WOW64"
             OPT_STD := $(OPT_STD) -I$(EXTERN_ROOT)/include/iconv
              LD_STD := $(LD_STD)  -L$(EXTERN_ROOT)/lib/iconv -liconv.dll
	endif
	
	ifeq "$(UNAME)" "CYGWIN_NT-6.2-WOW64"
             OPT_STD := $(OPT_STD) -I$(EXTERN_ROOT)/include/iconv
              LD_STD := $(LD_STD)  -L$(EXTERN_ROOT)/lib/iconv -liconv.dll
	endif
endif

ifneq "$(WITH_SHARED_LIBS)" "TRUE" 
          LIBSOURCES := $(foreach d, $($(TARGET).LIBS), $($(SHLIB_PRE)$(d).$(SHLIB).SOURCES))
      $(TARGET).LIBS :=
          OPT_SHARED := 
           LD_SHARED :=
endif 

ifneq "$($(TARGET).ISDLL)" "TRUE"
          SHARED_LIB := FALSE
              LD_PRE := 
           LD_OUTPUT := $(TARGET)
    ifneq "$($(TARGET).LIBS)" ""
             LIB_ADD := $(LIB_ADD)  -L. $(foreach l, $($(TARGET).LIBS), -l$(l))
    endif
           
else
          SHARED_LIB := TRUE
          OPT_SHARED := -shared
           LD_SHARED := -shared
           LD_OUTPUT := $(TARGET)
    ifneq "$($(TARGET).LIBS)" ""
             LIB_ADD := $(LIB_ADD) -L. $(foreach l, $($(TARGET).LIBS), -l$(l))
    endif
endif

           LD_FLAGS := $(LD_STD) $(LD_SHARED)  \
                       $(LIB_GD) $(LIB_ADD) $(LIB_PTH) $(LIB_PG)
          INC_FLAGS := $(INC_ADD) $(INC_STD) \
                       $(INC_PTH) $(INC_PGSQL) $(INC_PG) $(INC_GD)
          
          OPT_FLAGS := $(OPT_STD) $(OPT_SHARED)
          

SOURCES := $($(TARGET).SOURCES) $(LIBSOURCES)

LIBDIRS := $(foreach d, $($(TARGET).LIBS), $($(d).SOURCES))

OBJECTS := $(patsubst %.ecpg,%.o, $(SOURCES))
OBJECTS := $(patsubst   %.cpp,%.o, $(OBJECTS))
OBJECTS := $(patsubst   %.c,%.o, $(OBJECTS))
OBJECTS := $(OBJECTS) $($(TARGET).OBJS)

CLEAN_OBJS := $(patsubst   %.cpp,%.o, $(SOURCES))
CLEAN_OBJS := $(patsubst   %.c,%.o,   $(CLEAN_OBJS))
CLEAN_OBJS := $(CLEAN_OBJS) $(TARGET) $(TARGET).exe $(TARGET).inc lib$(TARGET).so* *.stackdump News

